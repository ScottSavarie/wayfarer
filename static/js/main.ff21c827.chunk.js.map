{"version":3,"sources":["bandcamp.svg","fb.svg","spotify.svg","play.svg","close.svg","twitter.svg","youtube.svg","instagram.svg","bg.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","VIDEO_URL","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handlePlayClick","setState","isPlaying","getVideo","react_default","a","createElement","className","title","width","height","src","frameBorder","allow","allowFullScreen","getIcons","state","onClick","handleCloseClick","close","alt","href","bandcamp","spotify","instagram","play","fb","twitter","youtube","style","background","concat","bg","backgroundSize","video","icons","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ff21c827.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bandcamp.c60adaaa.svg\";","module.exports = __webpack_public_path__ + \"static/media/fb.70432671.svg\";","module.exports = __webpack_public_path__ + \"static/media/spotify.a3e78dd5.svg\";","module.exports = __webpack_public_path__ + \"static/media/play.33704688.svg\";","module.exports = __webpack_public_path__ + \"static/media/close.4a6dea0c.svg\";","module.exports = __webpack_public_path__ + \"static/media/twitter.89eaa742.svg\";","module.exports = __webpack_public_path__ + \"static/media/youtube.31700ff4.svg\";","module.exports = __webpack_public_path__ + \"static/media/instagram.d667e876.svg\";","module.exports = __webpack_public_path__ + \"static/media/bg.65f8f190.jpg\";","import React, { Component } from 'react';\nimport bandcamp from './bandcamp.svg';\nimport fb from './fb.svg';\nimport spotify from './spotify.svg';\nimport play from './play.svg';\nimport close from './close.svg';\nimport twitter from './twitter.svg';\nimport youtube from './youtube.svg';\nimport instagram from './instagram.svg';\nimport bg from './bg.jpg'\nimport './App.css';\n\nconst VIDEO_URL = \"https://www.youtube-nocookie.com/embed/mkbd_ULmX_k?controls=0&modestbranding=1&autoplay=1\";\n\nclass App extends Component {\n  constructor () {\n  super();\n  this.state = {\n    isPlaying: false,\n  };\n}\n\nhandlePlayClick = () => {\n  this.setState({\n    isPlaying: true,\n  });\n}\n\ngetVideo = () => {\n  return (\n    <div className=\"video-container\">\n      <iframe \n        title=\"Wayfarer Video\"\n        width=\"100%\" \n        height=\"100%\" \n        src={VIDEO_URL} \n        frameBorder=\"0\" \n        allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" \n        allowFullScreen>\n      </iframe>\n    </div>\n  );\n}\n\ngetIcons = () => {\n  const { isPlaying } = this.state;\n\n  if (!isPlaying) {\n    return (\n      <div className=\"icons\">\n        <a href=\"https://wayfarer.bandcamp.com/\"><img src={bandcamp} className=\"icon\" alt=\"Wayfarer Bandcamp\" title=\"Wayfarer Bandcamp\" /></a>\n        <a href=\"https://open.spotify.com/artist/3RZV54dRzoxH5cRuRBntGt?si=jV2-3BOTQjidM5quNVsxyA\"><img src={spotify} className=\"icon\" alt=\"Wayfarer Spotify\" title=\"Wayfarer Spotify\" /></a>\n        <a href=\"https://www.instagram.com/wayfarerband/\"><img src={instagram} className=\"icon icon-instagram\" alt=\"Wayfarer Instagram\" title=\"Wayfarer Instagram\" /></a>\n        <div onClick={this.handlePlayClick}><img src={play} className=\"icon icon-play\" alt=\"Play Button\" title=\"Play Button\"/></div>\n        <a href=\"https://www.facebook.com/wayfarerkw/\"><img src={fb} className=\"icon\" alt=\"Wayfarer Facebook\" title=\"Wayfarer Facebook\" /></a>\n        <a href=\"https://twitter.com/Wayfarerband\"><img src={twitter} className=\"icon\" alt=\"Wayfarer Twitter\" title=\"Wayfarer Twitter\" /></a>\n        <a href=\"https://www.youtube.com/user/Wayfarerband420\"><img src={youtube} className=\"icon icon-youtube\" alt=\"Wayfarer Youtube\" title=\"Wayfarer Youtube\" /></a>\n      </div>   \n    );\n  }\n\n  return (\n    <div className=\"icons icon-close-container\">\n      <div onClick={this.handleCloseClick}><img src={close} className=\"icon icon-close\" alt=\"Close Button\" title=\"Close Button\"/></div>\n    </div>    \n  );\n\n}\n\nhandleCloseClick = () => {\n  this.setState({\n    isPlaying: false,\n  });\n}\n\n\n  render() {\n\n    const { isPlaying } = this.state;\n\n    const style = {\n      background: `url(${bg}) no-repeat`,\n      backgroundSize: 'cover',\n    };\n\n    const video = isPlaying ? this.getVideo() : '';\n    const icons = this.getIcons();\n\n    return (\n      <div style={style} className=\"App\">\n          {video}\n          <header className=\"header\">\n            <h1 className=\"band-title\">Wayfarer</h1>\n            <h2 className=\"album-title\">Reckless <span className=\"spring\">Spring</span></h2>\n          </header>\n          {icons}\n          <nav className=\"nav\">\n            <a className=\"nav-item\" href=\"https://wayfarerband.tumblr.com/\" alt=\"Blog\" title=\"Blog\">Blog</a>\n            <a className=\"nav-item\" href=\"https://wayfarer.bandcamp.com/merch\" alt=\"Store\" title=\"Store\">Store</a>\n            <a className=\"nav-item\" href=\"mailto:wayfarerband@gmail.com\" alt=\"Contact\" title=\"Contact\">Contact</a>\n          </nav> \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}